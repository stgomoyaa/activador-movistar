#!/usr/bin/env python3
"""
Test de v4l2loopback con Selenium
Valida que la c√°mara virtual funciona correctamente con Chrome
"""

import subprocess
import time
import os
import sys
from pathlib import Path

def log_info(msg):
    print(f"‚úÖ {msg}")

def log_error(msg):
    print(f"‚ùå {msg}")

def log_warn(msg):
    print(f"‚ö†Ô∏è  {msg}")

class ControladorCamaraVirtual:
    """Controlador de v4l2loopback (reemplazo de OBS)"""
    
    def __init__(self, dispositivo='/dev/video10'):
        self.dispositivo = dispositivo
        self.proceso_actual = None
        self.verificar_dispositivo()
    
    def verificar_dispositivo(self):
        """Verifica que el dispositivo existe"""
        if not os.path.exists(self.dispositivo):
            log_error(f"Dispositivo {self.dispositivo} no existe")
            log_warn("Ejecuta: sudo modprobe v4l2loopback devices=1 video_nr=10")
            sys.exit(1)
        log_info(f"Dispositivo {self.dispositivo} encontrado")
    
    def mostrar_video(self, ruta_video, loop=True):
        """
        Muestra un video en la c√°mara virtual
        
        Args:
            ruta_video: Ruta al archivo Y4M
            loop: Si es True, reproduce en loop infinito
        """
        if not Path(ruta_video).exists():
            log_error(f"Archivo no encontrado: {ruta_video}")
            return False
        
        # Detener video anterior si existe
        if self.proceso_actual:
            log_info("Deteniendo video anterior...")
            self.proceso_actual.terminate()
            try:
                self.proceso_actual.wait(timeout=2)
            except subprocess.TimeoutExpired:
                self.proceso_actual.kill()
        
        # Preparar comando FFmpeg
        cmd = ['ffmpeg', '-re']
        
        if loop:
            cmd.extend(['-stream_loop', '-1'])  # Loop infinito
        
        cmd.extend([
            '-i', ruta_video,
            '-f', 'v4l2',
            self.dispositivo
        ])
        
        # Iniciar proceso FFmpeg
        log_info(f"Reproduciendo: {Path(ruta_video).name}")
        self.proceso_actual = subprocess.Popen(
            cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        
        time.sleep(1)  # Esperar a que FFmpeg inicialice
        
        if self.proceso_actual.poll() is not None:
            log_error("FFmpeg fall√≥ al iniciar")
            return False
        
        return True
    
    def detener(self):
        """Detiene la reproducci√≥n actual"""
        if self.proceso_actual:
            self.proceso_actual.terminate()
            self.proceso_actual.wait()
            log_info("Video detenido")

def test_basico_v4l2():
    """Test b√°sico de v4l2loopback sin navegador"""
    print("\n" + "="*50)
    print("üß™ TEST 1: Verificaci√≥n b√°sica de v4l2loopback")
    print("="*50 + "\n")
    
    # Verificar que v4l2loopback est√° cargado
    result = subprocess.run(['lsmod'], capture_output=True, text=True)
    if 'v4l2loopback' in result.stdout:
        log_info("M√≥dulo v4l2loopback cargado")
    else:
        log_error("M√≥dulo v4l2loopback NO cargado")
        log_warn("Ejecuta: sudo modprobe v4l2loopback devices=1 video_nr=10")
        return False
    
    # Listar dispositivos de video
    log_info("Listando dispositivos de video disponibles:")
    subprocess.run(['v4l2-ctl', '--list-devices'])
    
    return True

def test_reproduccion_video():
    """Test de reproducci√≥n de video en c√°mara virtual"""
    print("\n" + "="*50)
    print("üß™ TEST 2: Reproducci√≥n de video en /dev/video10")
    print("="*50 + "\n")
    
    # Buscar videos Y4M
    videos_dir = Path('temp_videos_y4m')
    if not videos_dir.exists():
        log_error(f"Directorio {videos_dir} no existe")
        return False
    
    videos = list(videos_dir.glob('*.y4m'))
    if not videos:
        log_error("No se encontraron archivos Y4M")
        return False
    
    log_info(f"Encontrados {len(videos)} videos Y4M")
    
    # Crear controlador
    cam = ControladorCamaraVirtual()
    
    # Probar reproducci√≥n de cada video por 3 segundos
    for video in videos[:3]:  # Solo los primeros 3
        log_info(f"\nReproduciendo: {video.name}")
        if cam.mostrar_video(str(video), loop=True):
            log_info("Reproduciendo durante 3 segundos...")
            time.sleep(3)
        else:
            log_error(f"Fall√≥ reproducci√≥n de {video.name}")
            return False
    
    cam.detener()
    log_info("Test de reproducci√≥n completado")
    return True

def test_cambio_dinamico():
    """Test de cambio din√°mico entre videos (simula biometr√≠a)"""
    print("\n" + "="*50)
    print("üß™ TEST 3: Cambio din√°mico de videos (simula biometr√≠a)")
    print("="*50 + "\n")
    
    videos_dir = Path('temp_videos_y4m')
    cam = ControladorCamaraVirtual()
    
    secuencia = [
        ('front.y4m', 3, 'Documento FRONTAL'),
        ('back.y4m', 3, 'Documento REVERSO'),
        ('idle.y4m', 2, 'Rostro en REPOSO'),
        ('left.y4m', 2, 'Girar IZQUIERDA'),
        ('idle.y4m', 1, 'Volver a REPOSO'),
        ('right.y4m', 2, 'Girar DERECHA'),
        ('idle.y4m', 1, 'Volver a REPOSO'),
    ]
    
    log_info("Iniciando secuencia de biometr√≠a simulada...\n")
    
    for archivo, duracion, descripcion in secuencia:
        ruta = videos_dir / archivo
        if not ruta.exists():
            log_warn(f"Archivo {archivo} no existe, saltando...")
            continue
        
        print(f"üìπ {descripcion}...")
        if cam.mostrar_video(str(ruta), loop=True):
            time.sleep(duracion)
        else:
            log_error(f"Fall√≥ cambio a {archivo}")
            return False
    
    cam.detener()
    log_info("\n‚úÖ Secuencia completa ejecutada con √©xito")
    print("\nüí° Este mismo flujo reemplazar√° el control de OBS en producci√≥n")
    return True

def test_selenium_basico():
    """Test de Selenium con v4l2loopback"""
    print("\n" + "="*50)
    print("üß™ TEST 4: Chrome + Selenium detectando c√°mara virtual")
    print("="*50 + "\n")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.chrome.service import Service
    except ImportError:
        log_error("Selenium no est√° instalado")
        log_warn("Instala con: pip install selenium webdriver-manager")
        return False
    
    # Iniciar video en c√°mara virtual
    videos_dir = Path('temp_videos_y4m')
    cam = ControladorCamaraVirtual()
    
    idle_video = videos_dir / 'idle.y4m'
    if not idle_video.exists():
        log_error("idle.y4m no encontrado")
        return False
    
    log_info("Iniciando video idle.y4m en c√°mara virtual...")
    if not cam.mostrar_video(str(idle_video), loop=True):
        return False
    
    # Configurar Chrome para usar la c√°mara virtual
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Sin GUI
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--use-fake-ui-for-media-stream')
    chrome_options.add_argument('--use-fake-device-for-media-stream')
    
    # Mobile emulation (iPhone XR como en producci√≥n)
    mobile_emulation = {"deviceName": "iPhone XR"}
    chrome_options.add_experimental_option("mobileEmulation", mobile_emulation)
    
    # Dar permiso autom√°tico a la c√°mara
    prefs = {
        "profile.default_content_setting_values.media_stream_camera": 1,
        "profile.default_content_setting_values.media_stream_mic": 1
    }
    chrome_options.add_experimental_option("prefs", prefs)
    
    log_info("Iniciando Chrome headless...")
    
    try:
        driver = webdriver.Chrome(options=chrome_options)
        
        # Ir a p√°gina de prueba de webcam
        log_info("Navegando a p√°gina de prueba de webcam...")
        driver.get("https://webcamtests.com/")
        
        log_info("Esperando 5 segundos para detecci√≥n de c√°mara...")
        time.sleep(5)
        
        # Verificar que la p√°gina carg√≥
        page_title = driver.title
        log_info(f"T√≠tulo de p√°gina: {page_title}")
        
        # Capturar screenshot
        screenshot_path = "/tmp/test_webcam_v4l2.png"
        driver.save_screenshot(screenshot_path)
        log_info(f"Screenshot guardado en: {screenshot_path}")
        
        driver.quit()
        cam.detener()
        
        log_info("‚úÖ Test de Selenium completado")
        return True
        
    except Exception as e:
        log_error(f"Error en test de Selenium: {e}")
        cam.detener()
        return False

def main():
    """Ejecuta todos los tests"""
    print("\n" + "="*60)
    print("üöÄ SUITE DE TESTS PARA v4l2loopback")
    print("Proyecto: Activaci√≥n Masiva Movistar SIN OBS")
    print("="*60)
    
    # Verificar que estamos en Linux
    if not sys.platform.startswith('linux'):
        log_error("Este script solo funciona en Linux")
        sys.exit(1)
    
    tests = [
        ("Verificaci√≥n b√°sica", test_basico_v4l2),
        ("Reproducci√≥n de videos", test_reproduccion_video),
        ("Cambio din√°mico", test_cambio_dinamico),
        ("Selenium + Chrome", test_selenium_basico),
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        try:
            resultado = test_func()
            resultados.append((nombre, resultado))
        except Exception as e:
            log_error(f"Test '{nombre}' fall√≥ con excepci√≥n: {e}")
            resultados.append((nombre, False))
        
        time.sleep(1)
    
    # Resumen final
    print("\n" + "="*60)
    print("üìä RESUMEN DE TESTS")
    print("="*60 + "\n")
    
    for nombre, resultado in resultados:
        status = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"{status} - {nombre}")
    
    total_pass = sum(1 for _, r in resultados if r)
    total_tests = len(resultados)
    
    print(f"\nüìà Total: {total_pass}/{total_tests} tests pasaron")
    
    if total_pass == total_tests:
        print("\nüéâ ¬°TODOS LOS TESTS PASARON!")
        print("‚úÖ v4l2loopback est√° listo para reemplazar OBS")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - total_pass} test(s) fallaron")
        print("Revisa los errores antes de migrar a producci√≥n")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
